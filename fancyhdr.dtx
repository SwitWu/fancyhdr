% \iffalse meta-comment
%
% Copyright (C) 2016 by Piet van Oostrum <piet@vanoostrum.org>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{\jobname.dtx}
%</driver>
%
%    \begin{macrocode}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\NeedsTeXFormat{LaTeX2e}
%<fancyhdr>\ProvidesPackage{fancyhdr}%
%<fancyheadings>\ProvidesPackage{fancyheadings}
%<extramarks>\ProvidesPackage{extramarks}
%<fancyhdr|fancyheadings|extramarks>           [2016/10/11 v3.9
%<fancyhdr>                  Extensive control of page headers and footers]%
%<fancyheadings>                  Legacy package to call fancyhdr]
%<extramarks>                  Extra marks for LaTeX]
%<fancyhdr|extramarks>%% Copyright (C) 1994-2016 by Piet van Oostrum <piet@vanoostrum.org>
%<fancyheadings>%% Public domain
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%    \end{macrocode}
%
%<*driver>
\documentclass[a4paper]{ltxdoc}
\usepackage[T1]{fontenc}
%\usepackage{fancyhdr,extramarks}
\usepackage{url}
\DisableCrossrefs
\CodelineIndex
\RecordChanges
\let\environment\texttt
\let\Package\textsf
\def\bsbs{\cs{\char`\\}}
\renewcommand{\partname}{Part}
\begin{document}
  \DeleteShortVerb{\|}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
% \GetFileInfo{fancyhdr.sty}
%
% \DoNotIndex{\#,\$,\%,\&,\@,\\,\{,\},\^,\_,\~,\ }
% \DoNotIndex{\@ne}
% \DoNotIndex{\advance,\begingroup,\catcode,\closein}
% \DoNotIndex{\closeout,\day,\def,\edef,\else,\empty,\endgroup}
%
% \title{The \Package{fancyhdr} and \Package{extramarks} packages\thanks{This document
%   corresponds to \textsf{fancyhdr}~\fileversion, dated \filedate.}}
% \author{Piet van Oostrum\thanks{[Formerly] Dept of Computer and Information Sciences,
% University of Utrecht. I am now retired.} \\ \texttt{piet@vanoostrum.org}}
%
% \maketitle
%
%\part{Introduction}
% 
%
% To be provided.
%
% \section{Usage}
%
% To be provided.
%
%\part{Page Layout in \LaTeX}
%
% \StopEventually{%
% \PrintChanges
% \PrintIndex}
%
% \part{Implementation}
%
% \section{Fancyhdr.sty}
%
%<*fancyhdr>
% \changes{fancyhdr v1.4}{1994/09/16}{Correction for use with \cs{reversemarginpar}}
% 
% \changes{fancyhdr v1.5}{1994/09/29}{Added the \cs{iftopfloat},
% \cs{ifbotfloat} and \cs{iffloatpage} commands}
% 
% \changes{fancyhdr v1.6}{1994/10/04}{Reset single spacing in headers/footers for use with
% \Package{setspace.sty} or \Package{doublespace.sty}}
% 
% \changes{fancyhdr v1.7}{1994/10/04}{Changed \cs{let}\cs{@mkboth}\cs{markboth} to
% \texttt{\cs{def}\cs{@mkboth}\{\cs{protect}\cs{markboth}\}} to make it more robust.}
% 
% \changes{fancyhdr v1.8}{1994/12/05}{corrections for
% \Package{amsbook}/\Package{amsart}: define \cs{@chapapp} and (more
% importantly) use the \cs{chapter/sectionmark} definitions from \texttt{ps@headings} if
% they exist (which should be true for all standard classes).}
% 
% \changes{fancyhdr v1.9}{1995/03/31}{The proposed 
% \texttt{\cs{renewcommand}\{\cs{headrulewidth}\}} \texttt{\{\cs{iffloatpage}\ldots}
% construction in the doc did not work properly with the \texttt{fancyplain} style.}
% 
% \changes{fancyhdr v1.91}{1995/06/01}{The definition of \cs{@mkboth} wasn't 
% restored on subsequent \texttt{\cs{pagestyle}\{fancy\}}'s.}
% 
% \changes{fancyhdr v1.92}{1995/06/01}{The sequence
% \texttt{\cs{pagestyle}\{fancyplain\} \cs{pagestyle}\{plain\}
% \cs{pagestyle}\{fancy\}} would erroneously select the plain version.}
% 
% \changes{fancyhdr v1.93}{1995/06/01}{\cs{fancypagestyle} command added.}
% 
% \changes{fancyhdr v1.94}{1995/12/11}{(suggested by Conrad Hughes
% \texttt{<chughes@maths.tcd.ie!>}): added \cs{footruleskip} to allow control over footrule
% position (old hardcoded value of .3\cs{normalbaselineskip} is far too high
% when used with very small footer fonts).}
% 
% \changes{fancyhdr v1.95}{1996/01/31}{call \cs{@normalsize} in the reset code if that is defined, 
% otherwise \cs{normalsize}. This is to solve a problem with
% \Package{ucthesis.cls}, as this doesn't define \cs{@currsize}.
% Unfortunately for latex209 calling \cs{normalsize} doesn't
% work as this is optimized to do very little, so there \cs{@normalsize} should
% be called. Hopefully this code works for all versions of LaTeX known to
% mankind.}
% 
% \changes{fancyhdr v1.96}{1996/04/25}{Initialize \cs{headwidth} to a
% magic (negative) value to catch most common cases that people change
% it before calling \texttt{\cs{pagestyle}\{fancy\}}. 
% Note it can't be initialized when reading in this file, because
% \cs{textwidth} could be changed afterwards. This is quite probable.
% We also switch to \cs{MakeUppercase} rather than \cs{uppercase} and introduce a
% \cs{nouppercase} command for use in headers. and footers.}
% 
% \changes{fancyhdr v1.97}{1996/05/03}{Two changes: \newline
% 1. Undo the change in version 1.8
% (using the \texttt{\cs{pagestyle}\{headings\}} defaults 
% for the chapter and section marks). The current version of amsbook and
% amsart classes don't seem to need them anymore. Moreover the standard
% \LaTeX{} classes don't use \cs{markboth} if twoside isn't selected, and this is
% confusing as \cs{leftmark} doesn't work as expected.\newline
% 2. Include a call to \cs{ps@empty}
% in \cs{ps@@fancy}. This is to solve a problem 
% in the amsbook and amsart classes, that make global changes to \cs{topskip},
% which are reset in \cs{ps@empty}. Hopefully this doesn't break other things.}
% 
% \changes{fancyhdr v1.98}{1996/05/07}{Added \% after the line  \cs{def}\cs{nouppercase}}
% 
% \changes{fancyhdr v1.99}{1996/05/07}{This is the alpha version of fancyhdr 2.0\newline
% Introduced the new commands \cs{fancyhead}, \cs{fancyfoot}, and \cs{fancyhf}.
% Changed \cs{headrulewidth}, \cs{footrulewidth}, \cs{footruleskip} to
% macros rather than length parameters, In this way they can be
% conditionalized and they don't consume length registers. There is no need
% to have them as length registers unless you want to do calculations with
% them, which is unlikely. Note that this may make some uses of them
% incompatible (i.e. if you have a file that uses \cs{setlength} or \cs{xxxx}!=)}
% 
% \changes{fancyhdr v1.99a}{1996/05/10}{Added a few more \% signs.}
% 
% \changes{fancyhdr v1.99b}{1996/05/10}{Changed the syntax of
% \cs{f@nch@for} to be resistent to catcode changes of \texttt{:!=}.\protect\\
% Removed the \texttt{[1]} from the defs of \cs{lhead} etc. because the parameter is
% consumed by the \cs{@[xy]lhead} etc. macros.}
% 
% \changes{fancyhdr v1.99c}{1997/06/24}{Corrected \cs{nouppercase} to
% also include the protected form of \cs{MakeUppercase}.\\ 
% \cs{global} added to manipulation of \cs{headwidth}.\\
% \cs{iffootnote} command added.\\
% Some comments added about \cs{f@nch@head} and \cs{f@nch@foot}.}
% 
% \changes{fancyhdr v1.99d}{1998/08/24}{Changed the default
% \cs{ps@empty} to \cs{ps@@empty} in order to allow
% \texttt{\cs{fancypagestyle}\{empty\}} redefinition.}
% 
% \changes{fancyhdr v2.0}{2000/10/11}{Added LPPL license clause.\\
% A check for \cs{headheight} is added. An errormessage is given (once) if the
% header is too large. Empty headers don't generate the error even if
% \cs{headheight} is very small or even 0pt. \\
% Warning added for the use of '\texttt{E}' option when twoside option is not used.
% In this case the '\texttt{E}' fields will never be used.}
% 
% \changes{fancyhdr v2.1beta}{2002/03/10}{New command:
% \texttt{\cs{fancyhfoffset}[place]\{length\}} defines offsets to be applied to
% the header/footer to let it stick into the margins (if length $!>$ 0).
% \texttt{place} is like in \cs{fancyhead}, except that only \texttt{E,O,L,R} can be used.
% This replaces the old calculation based on \cs{headwidth} and the marginpar
% area.
% \cs{headwidth} will be dynamically calculated in the headers/footers when
% this is used.}
% 
% \changes{fancyhdr v2.1beta2}{2002/03/26}{\cs{fancyhfoffset} now also
% takes \texttt{H,F} as possible letters in the argument to 
% allow the header and footer widths to be different.\\
% New commands \cs{fancyheadoffset} and \cs{fancyfootoffset} added comparable to
% \cs{fancyhead} and \cs{fancyfoot}.\\
% Errormessages and warnings have been made more informative.}
%
% \changes{fancyhdr v2.1x=fancyhdr v2.1}{2002/12/09}{The defaults for
% \cs{footrulewidth}, \cs{plainheadrulewidth} and
% \cs{plainfootrulewidth} are changed from \cs{z@skip} to 0pt. In this
% way when someone inadvertantly uses \cs{setlength} to change any of these, the value
% of \cs{z@skip} will not be changed, rather an errormessage will be given.}
%
% \changes{fancyhdr v3.0}{2004/03/03}{Release of version 3.0.}
%
% \changes{fancyhdr v3.1}{2004/10/07}{Added '\texttt{\cs{endlinechar}!=13}' to
% \cs{f@nch@reset} to prevent problems with \cs{includegraphics} in
% header/footer when \environment{verbatiminput} is active.}
% 
% \changes{fancyhdr v3.2}{2005/03/22}{Reset \cs{everypar} (the real one)
% in \cs{f@nch@reset} because spanish.ldf does strange things with
% \cs{everypar} between \guillemotleft\ and \guillemotright.}
% 
% \changes{fancyhdr v3.3}{2016/08/20}{Replace
% `\texttt{\cs{@ifundefined}\{chapter\}}' with `\cs{ifx}\cs{chapter}\cs{@undefined}' 
% because the former subtly makes \cs{chapter} equal to \cs{relax}, which may be
% undesirable in some cases.}
% 
% \changes{fancyhdr v3.4}{2016/08/21}{Replace \cs{rm} by
% \cs{normalfont}\cs{rmfamily} and \cs{sl} by \cs{normalfont}\cs{slshape}.}
% 
% \changes{fancyhdr v3.5}{2016/08/21}{Don't define \cs{footruleskip} if it is already defined.}
% 
% \changes{fancyhdr v3.6}{2016/08/27}{Added a \ProvidesPackage line.\\
% Updated contact information.}
% 
% \changes{fancyhdr v3.7}{2016/08/28}{Removed \cs{normalfont} from default values, as every field is already
% initialised with \cs{normalfont}.\\
% Set \cs{hsize} to \cs{headwidth} in header/footer.}
% 
% \changes{fancyhdr v3.8}{2016/09/06}{Reset \cs{}\cs{}, \cs{raggedleft},
% \cs{raggedright} and \cs{centering} to their default values to avoid a
% clash with the tabu package.\\
% Move the redefinition of \cs{@makecol} to \texttt{\cs{begin}\{document\}} to
% avoid a clash with the \Package{footmisc} package (and maybe others).\\
% Define a working \cs{iffootnote} command.}
%
% \changes{fancyhdr v3.9}{2016/10/11}{Put everything in a \texttt{.dtx} file.}
% \changes{fancyhdr v3.9}{2016/10/12}{Rename some macros to have 'f@nch@'
% in their names, to get a more uniform naming scheme for internal macros.}
%
% \begin{macro}{\if@nch@mpty}
% This macro tests if its argument is empty.
%    \begin{macrocode}
\def\if@nch@mpty#1{\def\temp@a{#1}\ifx\temp@a\@empty}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\f@nch@def}
% This macro defines another macro (usually a header or footer field).
% Depending on the value of \cs{f@nch@gbl} the definition will be
% global or local (the latter case is used in \cs{fancypagestyle}). If
% the value (argument 2) is empty, a \cs{leavevmode} will be substituted.
%  If it is not empty, a \cs{strut} will be added.
%    \begin{macrocode}
\def\f@nch@def#1#2{\if@nch@mpty{#2}\f@nch@gbl\def#1{\leavevmode}\else
                                   \f@nch@gbl\def#1{#2\strut}\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\f@nch@gbl}
% Initialize \cs{f@nch@gbl} to \cs{global}.
%    \begin{macrocode}
\let\f@nch@gbl\global
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\f@nch@errmsg}
% This macro generates an error message.
%    \begin{macrocode}
\def\f@nch@errmsg#1{%
  \ifx\PackageError\undefined \errmessage{#1}\else
  \PackageError{Fancyhdr}{#1}{}\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\f@nch@warning}
% This macro generates a warning.
%    \begin{macrocode}
\def\f@nch@warning#1{%
  \ifx\PackageWarning\undefined \errmessage{#1}\else
  \PackageWarning{Fancyhdr}{#1}{}\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\f@nch@forc}
%   Usage: \cs{f@nch@forc} \cs{var} \texttt{\{charstring\}\{body\}}.\\
%   Execute the body for each character in \texttt{charstring} bound
%   to \cs{var}.
%   This is similar to \LaTeX's \cs{@tfor}, but it expands the \texttt{charstring}.
%    \begin{macrocode}
\def\f@nch@forc#1#2#3{\expandafter\f@rc\expandafter#1\expandafter{#2}{#3}}
\def\f@rc#1#2#3{\def\temp@ty{#2}\ifx\@empty\temp@ty\else
                                    \f@nch@rc#1#2\f@nch@rc{#3}\fi}
\def\f@nch@rc#1#2#3\f@nch@rc#4{\def#1{#2}#4\f@rc#1{#3}{#4}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\f@nch@for}
%   Usage: \cs{f@nch@for}\cs{var}\texttt{\{list\}}\texttt{\{body\}} \\
%   Execute the body for each element of the list, bound to \cs{var}.
%   List elements are separated by commas. This is like \LaTeX's \cs{@for} but an empty
%   list is treated as a list with an empty element.
%
%    \begin{macrocode}
\newcommand{\f@nch@for}[3]{\edef\@fortmp{#2}%
  \expandafter\@forloop#2,\@nil,\@nil\@@#1{#3}}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\f@nch@default}
%   Usage: \cs{f@nch@default} \cs{var}\texttt{\{defaults\}\{argument\}} \\
%   Sets \cs{var} to the characters
%   from \texttt{defaults} appearing in \texttt{argument}, or to \texttt{defaults} if it would be
%   empty. All characters are lowercased first.
%
%    \begin{macrocode}
\newcommand\f@nch@default[3]{%
  \edef\temp@a{\lowercase{\edef\noexpand\temp@a{#3}}}\temp@a \def#1{}%
  \f@nch@forc\tmpf@ra{#2}%
  {\expandafter\f@nch@ifin\tmpf@ra\temp@a{\edef#1{#1\tmpf@ra}}{}}%
  \ifx\@empty#1\def#1{#2}\fi}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\f@nch@ifin}
%   Usage: \cs{f@nch@ifin} \meta{char} \meta{set} \meta{truecase} \meta{falsecase} \\
% If \meta{char} is in \meta{set}, then \meta{truecase} else \meta{falsecase}.
%    \begin{macrocode}
\newcommand{\f@nch@ifin}[4]{%
  \edef\temp@a{#2}\def\temp@b##1#1##2\temp@b{\def\temp@b{##1}}%
  \expandafter\temp@b#2#1\temp@b\ifx\temp@a\temp@b #4\else #3\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\fancyhead}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\fancyfoot}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\fancyhf}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% These are the principal user macros. Pick up the parameters,
% and supply an 'h' (\cs{fancyhead}) or 'f' (\cs{fancyfoot}).
%    \begin{macrocode}
\newcommand{\fancyhead}[2][]{\f@nch@fancyhf\fancyhead h[#1]{#2}}%
\newcommand{\fancyfoot}[2][]{\f@nch@fancyhf\fancyfoot f[#1]{#2}}%
\newcommand{\fancyhf}[2][]{\f@nch@fancyhf\fancyhf {}[#1]{#2}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fancyheadoffset}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\fancyfootoffset}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\fancyhfoffset}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
%   The commands for offsets.
% Pick up the parameters,
% and supply an 'h' (\cs{fancyheadoffset}) or 'f' (\cs{fancyfootoffset}).
%    \begin{macrocode}
\newcommand{\fancyheadoffset}[2][]{\f@nch@fancyhfoffs\fancyheadoffset h[#1]{#2}}%
\newcommand{\fancyfootoffset}[2][]{\f@nch@fancyhfoffs\fancyfootoffset f[#1]{#2}}%
\newcommand{\fancyhfoffset}[2][]{\f@nch@fancyhfoffs\fancyhfoffset {}[#1]{#2}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@fancyhf}
% This macro interprets the parameters for the headers and footers.\\
% Parameters:\\
% (1) The user command that was used (like \cs{fancyhead}). This is used
% for errors/warnings.\\
% (2) \texttt{h} (for \cs{fancyhead}), \texttt{f} (for \cs{fancyfoot}),
% or \texttt{\{\}} (for \cs{fancyhf}).\\
% (3) The optional parameter that was given to these commands (default \texttt{[]}).\\
% (4) The required parameter that was given to these commands.\\
%   The header and footer fields are stored in command sequences with
%   names of the form: \cs{f@nch@}\meta{x}\meta{y}\meta{z} with \meta{x} from
%   \texttt{[eo]}, \meta{y} from \texttt{[lcr]} and \meta{z} from \texttt{[hf]}.
%
%    \begin{macrocode}
\def\f@nch@fancyhf#1#2[#3]#4{%
  \def\temp@c{}%
  \f@nch@forc\tmpf@ra{#3}%
  {\expandafter\f@nch@ifin\tmpf@ra{eolcrhf,EOLCRHF}%
    {}{\edef\temp@c{\temp@c\tmpf@ra}}}%
  \ifx\@empty\temp@c\else \f@nch@errmsg{Illegal char `\temp@c' in
    \string#1 argument: [#3]}%
  \fi \f@nch@for\temp@c{#3}%
  {\f@nch@default\f@nch@@eo{eo}\temp@c \if@twoside\else \if\f@nch@@eo
    e\f@nch@warning {\string#1's `E' option without twoside option is
      useless}\fi\fi \f@nch@default\f@nch@@lcr{lcr}\temp@c
    \f@nch@default\f@nch@@hf{hf}{#2\temp@c}%
    \f@nch@forc\f@nch@eo\f@nch@@eo 
        {\f@nch@forc\f@nch@lcr\f@nch@@lcr 
          {\f@nch@forc\f@nch@hf\f@nch@@hf
            {\expandafter\f@nch@def\csname
              f@nch@\f@nch@eo\f@nch@lcr\f@nch@hf\endcsname {#4}}}}}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\f@nch@fancyhfoffs}
% This macro interprets the parameters for the header and footer
% offsets.\\
% Parameters:\\
% (1) The user command that was used (like \cs{fancyheadoffset}). This is used
% for errors/warnings.\\
% (2) \texttt{h} (for \cs{fancyheadoffset}), \texttt{f} (for \cs{fancyfootoffset}),
% or \texttt{\{\}} (for \cs{fancyhfoffset}).\\
% (3) The optional parameter that was given to these commands (default \texttt{[]}).\\
% (4) The required parameter that was given to these commands.\\
%   The header and footer offsets are stored in command sequences with
%   names of the form: \cs{f@nch@O@}\meta{x}\meta{y}\meta{z} with \meta{x} from
%   \texttt{[eo]}, \meta{y} from \texttt{[lr]} and \meta{z} from \texttt{[hf]}.
% 
%    \begin{macrocode}
\def\f@nch@fancyhfoffs#1#2[#3]#4{%
  \def\temp@c{}%
  \f@nch@forc\tmpf@ra{#3}%
  {\expandafter\f@nch@ifin\tmpf@ra{eolrhf,EOLRHF}%
    {}{\edef\temp@c{\temp@c\tmpf@ra}}}%
  \ifx\@empty\temp@c\else \f@nch@errmsg{Illegal char `\temp@c' in
    \string#1 argument: [#3]}%
  \fi \f@nch@for\temp@c{#3}%
  {\f@nch@default\f@nch@@eo{eo}\temp@c \if@twoside\else \if\f@nch@@eo
    e\f@nch@warning {\string#1's `E' option without twoside option is
      useless}\fi\fi \f@nch@default\f@nch@@lcr{lr}\temp@c
    \f@nch@default\f@nch@@hf{hf}{#2\temp@c}%
    \f@nch@forc\f@nch@eo\f@nch@@eo 
        {\f@nch@forc\f@nch@lcr\f@nch@@lcr
          {\f@nch@forc\f@nch@hf\f@nch@@hf
            {\expandafter\setlength\csname
              f@nch@O@\f@nch@eo\f@nch@lcr\f@nch@hf\endcsname {#4}}}}}%
  \f@nch@setoffs}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\lhead}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\chead}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\rhead}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\lfoot}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\cfoot}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
% \begin{macro}{\rfoot}
% \changes{fancyhdr v3.9}{2016/10/12}{Let \cs{newcommand} do the
% handling of the optional parameter.}
%   Fancyheadings version 1 commands. These are deprecated,
%   but they continue to work for compatibility reasons. They have an
%   optional parameter that is used as the value for even pages in a
%   two-sided document. If this is not given (or if the document is not
%   two-sided) the required parameter is used for both even and odd pages.
%   Therefore the default value for the optional parameter is the
%   required parameter. It is not possible to express this directly in
%   the definition. Therefore we use a trick. Both parameters are store
%   in a macro. For example for \cs{lhead} the parameter for even pages
%   is stored in \cs{f@nch@elh}, and the one for odd pages in
%   \cs{f@nch@olh}. For the others it is similar, just replace the
%   \texttt{l} with \texttt{c} or \texttt{r}, and the \texttt{h} with
%   \texttt{f}. In the body of the macro we first store the required
%   parameter in \cs{f@nch@olh}, and we use this macro as default for
%   the optional parameter. The optional parameter is then stored in
%   \cs{f@nch@elh}. The order of the assignments is therefore important.
%
%    \begin{macrocode}
\newcommand{\lhead}[2][\f@nch@olh]%
                     {\f@nch@def\f@nch@olh{#2}\f@nch@def\f@nch@elh{#1}}
\newcommand{\chead}[2][\f@nch@och]%
                     {\f@nch@def\f@nch@och{#2}\f@nch@def\f@nch@ech{#1}}
\newcommand{\rhead}[2][\f@nch@orh]%
                     {\f@nch@def\f@nch@orh{#2}\f@nch@def\f@nch@erh{#1}}
\newcommand{\lfoot}[2][\f@nch@olf]%
                     {\f@nch@def\f@nch@olf{#2}\f@nch@def\f@nch@elf{#1}}
\newcommand{\cfoot}[2][\f@nch@ocf]%
                     {\f@nch@def\f@nch@ocf{#2}\f@nch@def\f@nch@ecf{#1}}
\newcommand{\rfoot}[2][\f@nch@orf]%
                     {\f@nch@def\f@nch@orf{#2}\f@nch@def\f@nch@erf{#1}}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@headwidth}
% Length parameter to be used for \cs{headwidth}. We use this rather
% than defining \cs{headwidth} as a length paramater directly to protect
% ourself to someone saying: \verb+\let\headwidth\textwidth+. 
%    \begin{macrocode}
\newlength{\f@nch@headwidth} \let\headwidth\f@nch@headwidth
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\f@nch@O@elh} 
% \begin{macro}{\f@nch@O@erh} 
% \begin{macro}{\f@nch@O@olh}
% \begin{macro}{\f@nch@O@orh} 
% \begin{macro}{\f@nch@O@elf} 
% \begin{macro}{\f@nch@O@erf}
% \begin{macro}{\f@nch@O@olf} 
% \begin{macro}{\f@nch@O@orf}
% Length parameters for the offsets.
%    \begin{macrocode}
\newlength{\f@nch@O@elh} 
\newlength{\f@nch@O@erh} 
\newlength{\f@nch@O@olh}
\newlength{\f@nch@O@orh} 
\newlength{\f@nch@O@elf} 
\newlength{\f@nch@O@erf}
\newlength{\f@nch@O@olf} 
\newlength{\f@nch@O@orf}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\headrulewidth}
% \begin{macro}{\footrulewidth}
%    \begin{macrocode}
\newcommand{\headrulewidth}{0.4pt} 
\newcommand{\footrulewidth}{0pt}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%  \begin{macro}{\footruleskip}
%  Memoir also defines \cs{footruleskip}.
%  Don't define \cs{footruleskip} if it is already defined.
%    \begin{macrocode}
\@ifundefined{footruleskip}%
      {\newcommand{\footruleskip}{.3\normalbaselineskip}}{}
%    \end{macrocode}
% \end{macro}
% 
%  \begin{macro}{\plainheadrulewidth}
%  \begin{macro}{\plainfootrulewidth}
%   Fancyplain stuff shouldn't be used anymore (rather
%   \texttt{\cs{fancypagestyle}\{plain\}} should be used), but we keep it for
%   compatibility reasons.
%
%    \begin{macrocode}
\newcommand{\plainheadrulewidth}{0pt}
\newcommand{\plainfootrulewidth}{0pt}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\if@fancyplain}
% Boolean for the implementation of \cs{fancyplain}
%    \begin{macrocode}
\newif\if@fancyplain \@fancyplainfalse
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\fancyplain}
% Deprecated macro
%    \begin{macrocode}
\def\fancyplain#1#2{\if@fancyplain#1\else#2\fi}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\headwidth}
%   Initialize \cs{headwidth} with a magic constant.
%    \begin{macrocode}
\headwidth=-123456789sp
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\f@nch@raggedleft}
% \begin{macro}{\f@nch@raggedright}
% \begin{macro}{\f@nch@centering}
% \begin{macro}{\f@nch@everypar}
% Save the standard definitions of \cs{raggedleft}, \cs{raggedright},
% \cs{centering} and \cs{everypar} so that we can reset them when we are
% typesetting the headers and footers. Some packages change these to
% incompatible values.
%    \begin{macrocode}
\let\f@nch@raggedleft\raggedleft 
\let\f@nch@raggedright\raggedright
\let\f@nch@centering\centering
\let\f@nch@everypar\everypar
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@reset}
%   Command to reset various things in the headers: a.o. single spacing
%   (taken from setspace.sty) and the catcode of ^^M and
%   \cs{endlinechar} (so that epsf files
%   in the header work if a verbatim crosses a page boundary) It also
%   defines a \cs{nouppercase} command that disables \cs{uppercase} and
%   \cs{Makeuppercase}. It can only be used in the headers and footers. Set
%   \cs{hsize} to \cs{headwidth} (this helps for multicol); reset
%   \cs{}\cs{}, \cs{raggedleft}, \cs{raggedright} and \cs{centering} to
%   their default values (for tabu), and \cs{everypar} to empty.\\
%   The font is reset to \cs{normalfont}.
%    \begin{macrocode}
\def\f@nch@reset{\f@nch@everypar{}\restorecr\endlinechar=13
  \let\\\@normalcr \let\raggedleft\f@nch@raggedleft
  \let\raggedright\f@nch@raggedright \let\centering\f@nch@centering
  \def\baselinestretch{1}%
  \hsize=\headwidth
  \def\nouppercase##1{{\let\uppercase\relax\let\MakeUppercase\relax
      \expandafter\let\csname MakeUppercase \endcsname\relax##1}}%
  \ifx\undefined\@newbaseline % NFSS not present; 2.09 or 2e
  \ifx\@normalsize\undefined \normalsize % for ucthesis.cls
  \else \@normalsize \fi \else % NFSS (2.09) present
  \@newbaseline%
  \fi}
%    \end{macrocode}
% \end{macro}
%
% Initialization of the head and foot text.
%
% The default values still contain \cs{fancyplain} for compatibility:
% lefthead empty on ``plain'' pages, \cs{rightmark} on even, \cs{leftmark} on odd pages;
% evenhead empty on ``plain'' pages, \cs{leftmark} on even, \cs{rightmark} on odd pages.
%    \begin{macrocode}
\fancyhf{}
\if@twoside
  \fancyhead[el,or]{\fancyplain{}{\slshape\rightmark}}
  \fancyhead[er,ol]{\fancyplain{}{\slshape\leftmark}}
\else
  \fancyhead[l]{\fancyplain{}{\slshape\rightmark}}
  \fancyhead[r]{\fancyplain{}{\slshape\leftmark}}
\fi
\fancyfoot[c]{\rmfamily\thepage} % page number
%    \end{macrocode}
%
% \begin{macro}{\f@nch@vbox}
% Make a \cs{vbox} with the header or footer. Check whether there is
% enough space and give a warning if not.
%   Use box 0 as a temp box and dimen 0 as temp dimen. This can be done,
%   because this code will always be used inside another box, and
%   therefore the changes are local.
%
%    \begin{macrocode}
\def\f@nch@vbox#1#2{\setbox0\vbox{#2}\ifdim\ht0>#1\f@nch@warning
  {\string#1 is too small (\the#1): ^^J Make it at least \the\ht0.^^J We
    now make it that large for the rest of the document.^^J This may
    cause the page layout to be inconsistent, however\@gobble}%
  \dimen0=#1\global\setlength{#1}{\ht0}\ht0=\dimen0\fi \box0}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\f@nch@head}
% \begin{macro}{\f@nch@foot}
%   Put together a header or footer given the left, center and right
%   text, fillers at left and right and a rule. The \cs{xlap} commands put
%   the text into an hbox of zero size, so overlapping text does not
%   generate an errormessage. These macros have 5 parameters:\\
% 1. LEFTSIDE BEARING.  This determines at which side the header will stick
%   out. When \cs{fancyhfoffset} is used this calculates \cs{headwidth},
%   otherwise it is \cs{hss} or \cs{relax} (after expansion). \\
%   2. \cs{f@nch@olh}, \cs{f@nch@elh}, \cs{f@nch@olf} or \cs{f@nch@elf}.
%   This is the left component. \\
%   3. \cs{f@nch@och}, \cs{f@nch@ech}, \cs{f@nch@ocf} or \cs{f@nch@ecf}. This is the center
%   component. \\
%   4. \cs{f@nch@orh}, \cs{f@nch@erh}, \cs{f@nch@orf} or \cs{f@nch@erf}. This is the
%   right component. \\
%   5. RIGHTSIDE BEARING. This is always \cs{relax} or \cs{hss}
%   (after expansion).
%
%    \begin{macrocode}
\def\f@nch@head#1#2#3#4#5{#1\hbox to\headwidth{\f@nch@reset
    \f@nch@vbox\headheight{\hbox
      {\rlap{\parbox[b]{\headwidth}{\raggedright#2}}\hfill
        \parbox[b]{\headwidth}{\centering#3}\hfill
        \llap{\parbox[b]{\headwidth}{\raggedleft#4}}}\headrule}}#5}
%    \end{macrocode}
%
%    \begin{macrocode}
\def\f@nch@foot#1#2#3#4#5{#1\hbox to\headwidth{\f@nch@reset
    \f@nch@vbox\footskip{\footrule
      \hbox{\rlap{\parbox[t]{\headwidth}{\raggedright#2}}\hfill
        \parbox[t]{\headwidth}{\centering#3}\hfill
        \llap{\parbox[t]{\headwidth}{\raggedleft#4}}}}}#5}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\headrule}
%    \begin{macrocode}
\def\headrule{{\if@fancyplain\let\headrulewidth\plainheadrulewidth\fi
    \hrule\@height\headrulewidth\@width\headwidth
    \vskip-\headrulewidth}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\footrule}
%    \begin{macrocode}
\def\footrule{{\if@fancyplain\let\footrulewidth\plainfootrulewidth\fi
    \vskip-\footruleskip\vskip-\footrulewidth
    \hrule\@width\headwidth\@height\footrulewidth\vskip\footruleskip}}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\ps@fancy}
% Pagestyle \texttt{fancy}
%    \begin{macrocode}
\def\ps@fancy{%
  \@ifundefined{@chapapp}{\let\@chapapp\chaptername}{}% for amsbook
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\MakeUppercase}
%   Define \MakeUppercase for old \LaTeX{}en. Note: we used \cs{def} rather
%   than \cs{let}, so that \verb+\let\uppercase\relax+ (from the version 1
%   documentation) will still work.
%
%    \begin{macrocode}
\@ifundefined{MakeUppercase}{\def\MakeUppercase{\uppercase}}{}%
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\chaptermark}
% \begin{macro}{\sectionmark}
% \begin{macro}{\subsectionmark}
% Standard definitions for \cs{chaptermark}, \cs{sectionmark} and \cs{subsectionmark}.
% 
%    \begin{macrocode}
\ifx\chapter\@undefined \def\sectionmark##1{\markboth
  {\MakeUppercase{\ifnum \c@secnumdepth>\z@ \thesection\hskip 1em\relax
      \fi ##1}}{}}%
\def\subsectionmark##1{\markright {\ifnum \c@secnumdepth >\@ne
    \thesubsection\hskip 1em\relax \fi ##1}}%
\else \def\chaptermark##1{\markboth {\MakeUppercase{\ifnum
      \c@secnumdepth>\m@ne \@chapapp\ \thechapter. \ \fi ##1}}{}}%
\def\sectionmark##1{\markright{\MakeUppercase{\ifnum \c@secnumdepth >\z@
      \thesection. \ \fi ##1}}}%
\fi
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\ps@fancy}
% Pagestyle \texttt{fancy}. \cs{ps@@fancy} is the real pagestyle
% \texttt{fancy}, i.e. the non-plain one.
%    \begin{macrocode}
\ps@@fancy 
\gdef\ps@fancy{\@fancyplainfalse\ps@@fancy}%
%    \end{macrocode}
% \end{macro}
% 
% Initialize \cs{headwidth} if the user didn't. If \cs{headwidth} ${}< 0$,
% then the user did not initialize it, or they just added something to
% it in the expectation that
% it was initialized to \cs{textwidth}. We compensate this now. This loses if
% the user intended to multiply it by a factor. But that case is more
% likely done by saying something like \verb+\setlength{\headwidth}{1.2\textwidth}+. 
% The documentation says you have to change \cs{headwidth} after the first call to
% \verb+\pagestyle{fancy}+. This code is just to catch the most common cases were
% that requirement is violated.
%
%    \begin{macrocode}
\ifdim\headwidth<0sp
    \global\advance\headwidth123456789sp\global\advance\headwidth\textwidth
\fi}
%    \end{macrocode}
%
% \begin{macro}{\ps@fancyplain}
% The pagestyle \texttt{fancyplain} (deprecated).
% 
%    \begin{macrocode}
\def\ps@fancyplain{\ps@fancy \let\ps@plain\ps@plain@fancy}
\def\ps@plain@fancy{\@fancyplaintrue\ps@@fancy} 
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ps@@empty}
% Save the definition of \cs{ps@empty} (pagestyle \texttt{empty}).
% 
%    \begin{macrocode}
\let\ps@@empty\ps@empty
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\ps@@fancy}
% The actual pagestyle \texttt{fancy}. For amsbook/amsart, which do
% strange things with \cs{topskip}, we start with \cs{ps@@empty}. We
% construct the even and odd headers and footers from all the parts that
% we have collected.
%    \begin{macrocode}
\def\ps@@fancy{%
  \ps@@empty
  \def\@mkboth{\protect\markboth}%
  \def\@oddhead{\f@nch@head\f@nch@Oolh\f@nch@olh\f@nch@och\f@nch@orh\f@nch@Oorh}%
  \def\@oddfoot{\f@nch@foot\f@nch@Oolf\f@nch@olf\f@nch@ocf\f@nch@orf\f@nch@Oorf}%
  \def\@evenhead{\f@nch@head\f@nch@Oelh\f@nch@elh\f@nch@ech\f@nch@erh\f@nch@Oerh}%
  \def\@evenfoot{\f@nch@foot\f@nch@Oelf\f@nch@elf\f@nch@ecf\f@nch@erf\f@nch@Oerf}%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\f@nch@Oolh}
% \begin{macro}{\f@nch@Oorh}
% \begin{macro}{\f@nch@Oelh}
% \begin{macro}{\f@nch@Oerh}
% \begin{macro}{\f@nch@Oolf}
% \begin{macro}{\f@nch@Oorf}
% \begin{macro}{\f@nch@Oelf}
% \begin{macro}{\f@nch@Oerf}
%   Default definitions for compatibility mode: These cause the
%   header/footer to take the defined \cs{headwidth} as its width and if
%   required to shift it in the direction of the marginpar area.
%
%    \begin{macrocode}
\def\f@nch@Oolh{\if@reversemargin\hss\else\relax\fi}
\def\f@nch@Oorh{\if@reversemargin\relax\else\hss\fi}
\let\f@nch@Oelh\f@nch@Oorh 
\let\f@nch@Oerh\f@nch@Oolh
\let\f@nch@Oolf\f@nch@Oolh
\let\f@nch@Oorf\f@nch@Oorh
\let\f@nch@Oelf\f@nch@Oelh
\let\f@nch@Oerf\f@nch@Oerh
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@offsolh}
% \begin{macro}{\f@nch@offselh}
%   New definitions for the use of \cs{fancyhfoffset},
%   \cs{fancyheadoffset}, \cs{fancyfootoffset}.  These calculate the
%   \cs{headwidth} from \cs{textwidth} and the specified offsets.\\
%   First for the header.
%
%    \begin{macrocode}
\def\f@nch@offsolh{\headwidth=\textwidth\advance\headwidth\f@nch@O@olh
                   \advance\headwidth\f@nch@O@orh\hskip-\f@nch@O@olh}
\def\f@nch@offselh{\headwidth=\textwidth\advance\headwidth\f@nch@O@elh
                   \advance\headwidth\f@nch@O@erh\hskip-\f@nch@O@elh}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@offsolh}
% \begin{macro}{\f@nch@offselh}
% The same for the footer.
% 
%    \begin{macrocode}
\def\f@nch@offsolf{\headwidth=\textwidth\advance\headwidth\f@nch@O@olf
                   \advance\headwidth\f@nch@O@orf\hskip-\f@nch@O@olf}
\def\f@nch@offself{\headwidth=\textwidth\advance\headwidth\f@nch@O@elf
                   \advance\headwidth\f@nch@O@erf\hskip-\f@nch@O@elf}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\f@nch@setoffs}
% Set the offset parts to be used in the construction of the headers and
% footers. Depending on \cs{f@nch@gbl} it will be done globally (for
% pagestyle \texttt{fancy}) or locally (for \cs{fancypagestyle}).
% Just in case \verb+\let\headwidth\textwidth+ was used, we reset
% \cs{headwidth} to the length parameter that it should be.
%    \begin{macrocode}
\def\f@nch@setoffs{%
  \f@nch@gbl\let\headwidth\f@nch@headwidth
  \f@nch@gbl\let\f@nch@Oolh\f@nch@offsolh
  \f@nch@gbl\let\f@nch@Oelh\f@nch@offselh \f@nch@gbl\let\f@nch@Oorh\hss
  \f@nch@gbl\let\f@nch@Oerh\hss \f@nch@gbl\let\f@nch@Oolf\f@nch@offsolf
  \f@nch@gbl\let\f@nch@Oelf\f@nch@offself \f@nch@gbl\let\f@nch@Oorf\hss
  \f@nch@gbl\let\f@nch@Oerf\hss
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\iff@nch@footnote}
% \begin{macro}{\@makecol}
%   Redefine \cs{@makecol} so that we can capture if there are
%   top/bottom floats, footnotes or if we are on a float page. Because
%   of a clash with the footmisc package we do this at
%   \verb+\begin{document}+.\\
%   We need a boolean \cs{iff@nch@footnote} to capture if there was a footnote.
%
%    \begin{macrocode}
\newif\iff@nch@footnote 
\AtBeginDocument{%
  \let\latex@makecol\@makecol
  \def\@makecol{\ifvoid\footins\f@nch@footnotefalse\else\f@nch@footnotetrue\fi
    \let\topfloat\@toplist\let\botfloat\@botlist\latex@makecol}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\iftopfloat}
% \begin{macro}{\ifbotfloat}
% \begin{macro}{\iffloatpage}
% \begin{macro}{\iffootnote}
% These can be used in a header/footer field to make them conditional on
% the presence of floats and/or footnotes.
%    \begin{macrocode}
\newcommand\iftopfloat[2]{\ifx\topfloat\empty #2\else #1\fi}%
\newcommand\ifbotfloat[2]{\ifx\botfloat\empty #2\else #1\fi}%
\newcommand\iffloatpage[2]{\if@fcolmade #1\else #2\fi}%
\newcommand\iffootnote[2]{\iff@nch@footnote #1\else #2\fi}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\fancypagestyle}
%    \begin{macrocode}
\newcommand{\fancypagestyle}[2]{%
  \@namedef{ps@#1}{\let\f@nch@gbl\relax#2\relax\ps@fancy}}
%    \end{macrocode}
% \end{macro}
%</fancyhdr>
%
% \section{Extramarks.sty}
%
%<*extramarks>
% \changes{extramarks v1.99e}{2000/10/11}{Added a few \% marks to get rid
% of unwanted spaces, and \cs{endinput}. \\
% Added LPPL license clause.}
% \changes{extramarks v2.0beta}{2002/03/12}{Adapted for the new
% implementation of marks in \LaTeX{} to solve bug latex/3203. \\
% Added symmetric commands \cs{firstrightmark}, \cs{lastleftmark}, \cs{firstleftxmark},
% \cs{firstrightxmark}, \cs{lastrightxmark}, \cs{lastleftxmark}, \cs{topleftxmark} and
% \cs{toprightxmark}.}
% \changes{extramarks v2.0x=fancyhdr v 2.0}{2004/03/03}{version 2.0 Release.}
% \changes{extramarks v2.1}{2016/08/27}{Added a \cs{ProvidesPackage} line.\\
% Updated contact information.}
% \changes{extramarks v3.9}{2016/10/12}{Unify version number with \Package{fancyhdr.sty}.}
% 
%
% \begin{macro}{\@temptokenb}
% A token register to store some marks information
%    \begin{macrocode}
% \newtoks\@temptokenb
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\unrestored@protected@xdef}
% Define this macro just in case it isn't defined (should be part of \LaTeX).
%    \begin{macrocode}
\providecommand\unrestored@protected@xdef{%
  \let\protect\@unexpandable@protect \xdef}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\markboth}
% Our own definition of \cs{markboth}, mainly because \cs{@markboth}
% gets more parameters.
%    \begin{macrocode}
\def\markboth#1#2{%
  \begingroup
  \let\label\relax \let\index\relax \let\glossary\relax
  \expandafter\@markboth\@themark{#1}{#2}%
  \@temptokena \expandafter{\@themark}%
  \mark{\the\@temptokena}%
  \endgroup
  \if@nobreak\ifvmode\nobreak\fi\fi}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\markright}
%   We use the standard definition of \cs{markright}. No use to duplicate here.
% \end{macro}
% 
% \begin{macro}{\@markboth}
%   Note: put \texttt{\#3\#4} in toks register.
%    \begin{macrocode}
\def\@markboth#1#2#3#4#5#6{\@temptokena{{#3}{#4}}%
  \unrestored@protected@xdef\@themark{{#5}{#6}\the\@temptokena}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\@markright}
%   Note: put \texttt{\#1} and \texttt{\#3\#4} in toks registers.
%   Maybe I can get rid of the extra \cs{@temptokenb} by doing the expansion
%   of \texttt{\#5} to a temp separately. But then, nowadays registers
%   are plenty.
%    \begin{macrocode}
\def\@markright#1#2#3#4#5{\@temptokena{#1}\@temptokenb{{#3}{#4}}%
  \unrestored@protected@xdef\@themark{{\the\@temptokena}{#5}\the\@temptokenb}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\@leftmark}
% \begin{macro}{\@rightmark}
% Internal macros to get the standard marks.
%    \begin{macrocode}
\def\@leftmark#1#2#3#4{#1} 
\def\@rightmark#1#2#3#4{#2}
%    \end{macrocode}
% \end{macro}
% \end{macro}

% \begin{macro}{\leftmark}
% \begin{macro}{\rightmark}
% \begin{macro}{\firstleftmark}
% \begin{macro}{\lastrightmark}
% \begin{macro}{\firstrightmark}
% \begin{macro}{\lastleftmark}
% The standard marks + the new ones (based on the standard marks info).
%    \begin{macrocode}
\def\leftmark{\expandafter\@leftmark
      \botmark\@empty\@empty\@empty\@empty}
\def\rightmark{\expandafter\@rightmark
      \firstmark\@empty\@empty\@empty\@empty}
\def\firstleftmark{\expandafter\@leftmark
      \firstmark\@empty\@empty\@empty\@empty}
\def\lastrightmark{\expandafter\@rightmark
      \botmark\@empty\@empty\@empty\@empty}
\let\firstrightmark \rightmark
\let\lastleftmark \leftmark
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}

% \begin{macro}{\@themark}
% This is where the marks information is stored.
%    \begin{macrocode}
\def\@themark{{}{}{}{}}
%    \end{macrocode}
% \end{macro}

% \begin{macro}{\extramarks}
% This command is used to define the extra marks.
%    \begin{macrocode}
\newcommand\extramarks[2]{%
  \begingroup
  \let\label\relax \let\index\relax \let\glossary\relax
  \expandafter\@markextra\@themark{#1}{#2}%
  \@temptokena \expandafter{\@themark}%
  \mark{\the\@temptokena}%
  \endgroup
  \if@nobreak\ifvmode\nobreak\fi\fi}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\@markextra}
% Internal macro to store the extra marks in the marks storage.\\
%   Note: Put \texttt{\#1\#2} in toks register.
%    \begin{macrocode}
\def\@markextra#1#2#3#4#5#6{\@temptokena {{#1}{#2}}%
  \unrestored@protected@xdef\@themark{\the\@temptokena{#5}{#6}}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\firstleftxmark}
% \begin{macro}{\firstrightxmark}
% \begin{macro}{\topleftxmark}
% \begin{macro}{\toprightxmark}
% \begin{macro}{\lastleftxmark}
% \begin{macro}{\lastrightxmark}
% \begin{macro}{\firstxmark}
% \begin{macro}{\lastxmark}
% \begin{macro}{\topxmark}
% The new extra marks.
%    \begin{macrocode}
\def\firstleftxmark{\expandafter\@leftxmark
      \firstmark\@empty\@empty\@empty\@empty}
\def\firstrightxmark{\expandafter\@rightxmark
      \firstmark\@empty\@empty\@empty\@empty}
\def\topleftxmark{\expandafter\@leftxmark
      \topmark\@empty\@empty\@empty\@empty}
\def\toprightxmark{\expandafter\@rightxmark
      \topmark\@empty\@empty\@empty\@empty}
\def\lastleftxmark{\expandafter\@leftxmark
      \botmark\@empty\@empty\@empty\@empty}
\def\lastrightxmark{\expandafter\@rightxmark
      \botmark\@empty\@empty\@empty\@empty}
\let\firstxmark\firstleftxmark
\let\lastxmark\lastrightxmark
\let\topxmark\topleftxmark
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\@tleftxmark}
% \begin{macro}{\@rightxmark}
% Internal macros to extract the extra marks out of the marks storage.
%    \begin{macrocode}
\def\@leftxmark#1#2#3#4{#3}
\def\@rightxmark#1#2#3#4{#4}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%</extramarks>
%
% \Finale
\endinput
